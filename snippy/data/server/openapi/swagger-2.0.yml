swagger: '2.0'

info:
  version: "0.11.0"
  title: Snippy - Software development notes
  description: >-
    Snippy is a software development and maintenance notes manager. It allows organizing and sharing examples and solutions from self hosted or shared storage.
  termsOfService: "https://github.com/heilaaks/snippy"
  contact:
    email: "laaksonen.heikki.j@gmail.com"
  license:
    name: "GNU Affero General Public License v3.0 or later"
    url: "https://github.com/heilaaks/snippy/blob/master/LICENSE"
schemes: ["http", "https"]
host: "localhost:8080"
basePath: "/api/snippy/rest"
paths:
  /{category}:
    post:
      tags:
        - "content"
      summary: "Add new resource in defined category."
      description: ""
      consumes:
        - "application/vnd.api+json; charset=UTF-8"
      parameters:
        - $ref: '#/parameters/category'
        - $ref: '#/parameters/requestResource'
      responses:
        201:
          $ref: "#/responses/201"
        400:
          $ref: "#/responses/400"
        403:
          $ref: "#/responses/403"
        500:
          $ref: "#/responses/500"
    get:
      tags:
        - "content"
      summary: "Search resource"
      description: ""
      produces:
        - "application/vnd.api+json; charset=UTF-8"
      parameters:
        - $ref: '#/parameters/category'
        - $ref: '#/parameters/sall'
        - $ref: '#/parameters/stag'
        - $ref: '#/parameters/sgrp'
        - $ref: '#/parameters/digest'
        - $ref: '#/parameters/uuid'
        - $ref: '#/parameters/filter'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/fields'
        - $ref: '#/parameters/sort'
        - $ref: '#/parameters/offset'
      responses:
        200:
          $ref: "#/responses/200-collection"
        400:
          $ref: "#/responses/400"
        404:
          $ref: "#/responses/404"
        500:
          $ref: "#/responses/500"
  /{category}/{id}:
    post:
      tags:
        - "content"
      summary: "Override POST with PUT, PATCH or DELETE"
      description: ""
      consumes:
        - "application/vnd.api+json; charset=UTF-8"
      produces:
        - "application/vnd.api+json; charset=UTF-8"
      parameters:
        - $ref: '#/parameters/category'
        - $ref: '#/parameters/id'
        - $ref: '#/parameters/x-http-method-override'
        - $ref: '#/parameters/requestResource'
      responses:
        200:
          $ref: "#/responses/200-resource"
        204:
          description: "Resource deleted"
        400:
          $ref: "#/responses/400"
        403:
          $ref: "#/responses/403"
        404:
          $ref: "#/responses/404"
        500:
          $ref: "#/responses/500"
    put:
      tags:
        - "content"
      summary: "Update defined resource based on given identity."
      description: ""
      consumes:
        - "application/vnd.api+json; charset=UTF-8"
      produces:
        - "application/vnd.api+json; charset=UTF-8"
      parameters:
        - $ref: '#/parameters/category'
        - $ref: '#/parameters/id'
        - $ref: '#/parameters/requestResource'
      responses:
        200:
          $ref: "#/responses/200-resource"
        400:
          $ref: "#/responses/400"
        403:
          $ref: "#/responses/403"
        404:
          $ref: "#/responses/404"
        500:
          $ref: "#/responses/500"
    patch:
      tags:
        - "content"
      summary: "Update defined resource based on given identity."
      description: ""
      consumes:
        - "application/vnd.api+json; charset=UTF-8"
      produces:
        - "application/vnd.api+json; charset=UTF-8"
      parameters:
        - $ref: '#/parameters/category'
        - $ref: '#/parameters/id'
        - $ref: '#/parameters/requestResource'
      responses:
        200:
          $ref: "#/responses/200-resource"
        400:
          $ref: "#/responses/400"
        403:
          $ref: "#/responses/403"
        404:
          $ref: "#/responses/404"
        500:
          $ref: "#/responses/500"
    get:
      tags:
        - "content"
      summary: "Search defined resource based on given identity."
      description: ""
      consumes:
        - "application/vnd.api+json; charset=UTF-8"
      produces:
        - "application/vnd.api+json; charset=UTF-8"
      parameters:
        - $ref: '#/parameters/category'
        - $ref: '#/parameters/id'
      responses:
        200:
          $ref: "#/responses/200-resource"
        400:
          $ref: "#/responses/400"
        404:
          $ref: "#/responses/404"
        500:
          $ref: "#/responses/500"
    delete:
      tags:
      - "content"
      summary: "Delete defined resource based on given identity."
      description: ""
      parameters:
        - $ref: '#/parameters/category'
        - $ref: '#/parameters/id'
      responses:
        204:
          $ref: "#/responses/204"
        400:
          $ref: "#/responses/400"
        404:
          $ref: "#/responses/404"
        409:
          $ref: "#/responses/409"
        500:
          $ref: "#/responses/500"
  /{category}{id}{field}:
    get:
      tags:
        - "content"
      summary: "Get resource attribute."
      description: ""
      produces:
        - "application/vnd.api+json; charset=UTF-8"
      parameters:
        - $ref: '#/parameters/category'
        - $ref: '#/parameters/id'
        - $ref: '#/parameters/field'
        - $ref: '#/parameters/sall'
        - $ref: '#/parameters/stag'
        - $ref: '#/parameters/sgrp'
        - $ref: '#/parameters/digest'
        - $ref: '#/parameters/uuid'
        - $ref: '#/parameters/filter'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/fields'
        - $ref: '#/parameters/sort'
        - $ref: '#/parameters/offset'
      responses:
        200:
          $ref: "#/responses/200-resource"
        400:
          $ref: "#/responses/400"
        404:
          $ref: "#/responses/404"
        500:
          $ref: "#/responses/500"
  /tags:
    get:
      tags:
        - "fields"
      summary: "Get unique tags."
      description: ""
      produces:
        - "application/vnd.api+json; charset=UTF-8"
      parameters:
        - $ref: '#/parameters/scat'
        - $ref: '#/parameters/sall'
        - $ref: '#/parameters/stag'
        - $ref: '#/parameters/sgrp'
      responses:
        200:
          $ref: "#/responses/200-tags"
        400:
          $ref: "#/responses/400"
        404:
          $ref: "#/responses/404"
        500:
          $ref: "#/responses/500"
  /groups:
    get:
      tags:
        - "fields"
      summary: "Get unique groups."
      description: ""
      produces:
        - "application/vnd.api+json; charset=UTF-8"
      parameters:
        - $ref: '#/parameters/scat'
        - $ref: '#/parameters/sall'
        - $ref: '#/parameters/stag'
        - $ref: '#/parameters/sgrp'
      responses:
        200:
          $ref: "#/responses/200-groups"
        400:
          $ref: "#/responses/400"
        404:
          $ref: "#/responses/404"
        500:
          $ref: "#/responses/500"
  /:
    get:
      tags:
        - "hello"
      summary: "Get server hello."
      description: ""
      produces:
        - "application/vnd.api+json; charset=UTF-8"
      responses:
        200:
          $ref: "#/responses/200-hello"
responses:
  "200-resource":
    description: OK
    schema:
      $ref: "#/definitions/responseResource"
  "200-collection":
    description: OK
    schema:
      $ref: "#/definitions/responseCollectionGet"
  "200-tags":
    description: OK
    schema:
      $ref: "#/definitions/responseTags"
  "200-groups":
    description: OK
    schema:
      $ref: "#/definitions/responseGroups"
  "200-hello":
    description: OK
    schema:
      $ref: "#/definitions/responseHello"
  "201":
    description: "Resource created"
    schema:
      $ref: "#/definitions/responseCollectionPost"
  "204":
    description: "Resource deleted"
  "400":
    description: "Request not syntactically correct"
    schema:
      $ref: '#/definitions/responseErrors'
  "403":
    description: "Using client generated ID is not supported"
    schema:
      $ref: '#/definitions/responseErrors'
  "404":
    description: "Resource not found"
    schema:
      $ref: '#/definitions/responseErrors'
  "409":
    description: "More than one resource found"
    schema:
      $ref: '#/definitions/responseErrors'
  "500":
    description: "Internal server error"
definitions:
  attributeCategory:
    type: string
    enum: [snippet, solution, reference]
    description: |
      # Brief

      Automatically assigned resource category.
  attributeData:
    type: array
    items:
      type: string
    description: |
      # Brief

      Resource data attribute.
  attributeBrief:
    type: string
    default: ""
    description: |
      # Brief

      Optional brief description of the resource.
  attributeDescription:
    type: string
    default: ""
    description: |
      # Brief

      Optional long description of the resource.
  attributeName:
    type: string
    default: ""
    description: |
      # Brief

      Optional name for the resource.
  attributeGroups:
    type: array
    items:
      type: string
    default: ["default"]
    description: |
      # Brief

      Optional list of groups to which the resource belongs.
  attributeTags:
    type: array
    items:
      type: string
    default: []
    description: |
      # Brief

      Optional list of tags.
  attributeLinks:
    type: array
    items:
      type: string
    default: []
    description: |
      # Brief

      Optional list of links.
  attributeSource:
    type: string
    default: ""
    description: |
      # Brief

      Optional external source for the resource."
  attributeVersions:
    type: array
    items:
      type: string
    default: []
    description: |
      # Brief

      Optional list of versions related to the resource.
  attributeLanguages:
    type: array
    items:
      type: string
    default: []
    description: |
      # Brief

      Optional list of languages related to the resource.
  attributeFilename:
    type: string
    default: ""
    description: |
      # Brief

      Optional filename. This attribute can be used for example to export the resource into file
      which name is defined by this attribute-
  attributeCreated:
    type: string
    description: |
      # Brief

      Automatically generated UTC timestamp when the resource is created. The time is defined with
      RFC 3339 profile of the ISO 8601 specification.
  attributeUpdated:
    type: string
    description: |
      # Brief

      Automatically generated UTC timestamp for the latest update. The time is defined with RFC 3339
      profile of the ISO 8601 specification.
  attributeUuid:
    type: string
    description: |
      # Brief

      Automatically assigned UUID for the resource.
  attributeDigest:
    type: string
    description: |
      # Brief

      Automatically assigned message digest that uniquely identifies the resource.
  attributeGroupsDictionary:
    type: object
    additionalProperties:
      type: integer
    example:
      python: 8
      java: 1
    description: |
      # Brief

      Unique values for groups with count for each group value.
  attributeTagsDictionary:
    type: object
    additionalProperties:
      type: integer
    example:
      linux: 10
      docker: 4
    description: |
      # Brief

      Unique values for tags with count for each tag value.

  requestAttributes:
    type: object
    additionalProperties: false
    properties:
      data:
        $ref: '#/definitions/attributeData'
      brief:
        $ref: '#/definitions/attributeBrief'
      description:
        $ref: '#/definitions/attributeDescription'
      name:
        $ref: '#/definitions/attributeName'
      groups:
        $ref: '#/definitions/attributeGroups'
      tags:
        $ref: '#/definitions/attributeTags'
      links:
        $ref: '#/definitions/attributeLinks'
      source:
        $ref: '#/definitions/attributeSource'
      versions:
        $ref: '#/definitions/attributeVersions'
      languages:
        $ref: '#/definitions/attributeLanguages'
      filename:
        $ref: '#/definitions/attributeFilename'
    description: |
      # Brief

      Resource `data` attributes for all API endoints HTTP requests.
      
      Different resource categories require different attributes. Creating and updating resources have
      different mandatory resource attribute requirements. For example `snippets` require `data` but
      `references` require `links` attribute. PATCH and PUT can be send without `data` attribute for
      `snippets`.
      
      Because of these reasons, JSON schema definition does not define the required properties.

  responseAttributes:
    type: object
    additionalProperties: False
    properties:
      category:
        $ref: '#/definitions/attributeCategory'
      data:
        $ref: '#/definitions/attributeData'
      brief:
        $ref: '#/definitions/attributeBrief'
      description:
        $ref: '#/definitions/attributeDescription'
      name:
        $ref: '#/definitions/attributeName'
      groups:
        $ref: '#/definitions/attributeGroups'
      tags:
        $ref: '#/definitions/attributeTags'
      links:
        $ref: '#/definitions/attributeLinks'
      source:
        $ref: '#/definitions/attributeSource'
      versions:
        $ref: '#/definitions/attributeVersions'
      languages:
        $ref: '#/definitions/attributeLanguages'
      filename:
        $ref: '#/definitions/attributeFilename'
      created:
        $ref: '#/definitions/attributeCreated'
      updated:
        $ref: '#/definitions/attributeUpdated'
      uuid:
        $ref: '#/definitions/attributeUuid'
      digest:
        $ref: '#/definitions/attributeDigest'
    description: |
      # Brief

      Resource `data` attributes for all content API endoints.
      
      Different resource categories require different attributes. Creating and updating resources have
      different mandatory resource attribute requirements. For example `snippets` require `data` but
      `references` require `links` attribute. PATCH and PUT can be send without `data` attribute for
      `snippets`.

      Because of these reasons, JSON schema definition does not define the required properties.
  responseAttributesTags:
    type: object
    additionalProperties: False
    properties:
      tags:
        $ref: '#/definitions/attributeTagsDictionary'
    description: |
      # Brief

      Resource `data` attributes tags API endpont.
  responseAttributesGroups:
    type: object
    additionalProperties: False
    properties:
      groups:
        $ref: '#/definitions/attributeGroupsDictionary'
    description: |
      # Brief

      Resource `data` attributes groups API endpont.

  requestData:
    type: object
    properties:
      type:
        type: string
        enum: [snippet, solution, reference]
      attributes:
        $ref: '#/definitions/requestAttributes'
    required:
      - type
      - attributes
  requestResource:
    type: object
    properties:
      data:
        $ref: '#/definitions/requestData'
    required:
      - data
  requestCollection:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/requestData'
    required:
      - data

  responseData:
    type: object
    properties:
      type:
        type: string
        enum: [snippet, solution, reference]
      id:
        type: string
      attributes:
        $ref: '#/definitions/responseAttributes'
    required:
      - type
      - attributes
  responseDataTags:
    type: object
    properties:
      type:
        type: string
        enum: [tags]
      attributes:
        $ref: '#/definitions/responseAttributesTags'
    required:
      - type
      - attributes
  responseDataGroups:
    type: object
    properties:
      type:
        type: string
        enum: [groups]
      attributes:
        $ref: '#/definitions/responseAttributesGroups'
    required:
      - type
      - attributes
  responseResource:
    type: object
    properties:
      data:
        $ref: '#/definitions/responseData'
      link:
        $ref: '#/definitions/resourceLink'
    required:
      - data
  responseCollectionPost:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/responseData'
    required:
      - data
  responseCollectionGet:
    type: object
    properties:
      meta:
        $ref: '#/definitions/metaResponse'
      data:
        type: array
        items:
          $ref: '#/definitions/responseData'
      links:
        $ref: '#/definitions/paginationLinks'
    required:
      - meta
      - data
  responseTags:
    type: object
    additionalProperties: false
    properties:
      data:
        $ref: '#/definitions/responseDataTags'
    required:
      - data
  responseGroups:
    type: object
    additionalProperties: false
    properties:
      data:
        $ref: '#/definitions/responseDataGroups'
    required:
      - data
  responseErrors:
    type: object
    properties:
      meta:
        $ref: '#/definitions/metaInfo'
      errors:
        type: array
        items:
          $ref: '#/definitions/error'
    required:
      - meta
      - errors
  responseHello:
    type: object
    additionalProperties: false
    properties:
      meta:
        $ref: '#/definitions/metaInfo'
    required:
      - meta
  resourceLink:
    type: object
    properties:
      self:
        type: string
        description: "Link pointing to resource."
  paginationLinks:
    type: object
    properties:
      self:
        type: string
        format: uri
        description: "Pagination link to this page."
      first:
        type: string
        format: uri
        description: "Pagination link to first page."
      next:
        type: string
        format: uri
        description: "Pagination link to next page."
      prev:
        type: string
        format: uri
        description: "Pagination link to previous page."
      last:
        type: string
        format: uri
        description: "Pagination link to last page."
    required:
      - self
      - first
      - last

  metaResponse:
    type: object
    properties:
      count:
        type: string
        description: "Number of resources in the data object."
      limit:
        type: string
        description: "The search limit used in request."
      offset:
        type: string
        description: "The search offset used in request."
      total:
        type: string
        description: "Total number of search results without limit being applied."
    required:
      - count
      - limit
      - offset
      - total
  metaInfo:
    type: object
    properties:
      docs:
        type: string
        description: "Location of the public documentation."
      homepage:
        type: string
        description: "Server homepage."
      openapi:
        type: string
        description: "OpenAPI specification."
      version:
        type: string
        description: "Server version."
    required:
      - docs
      - homepage
      - openapi
      - version

  error:
    type: object
    properties:
      status:
        type: string
        description: "HTTP status code."
      statusString:
        type: string
        description: "HTTP status as text string."
      module:
        type: string
        description: "Location of error."
      title:
        type: string
        description: "Message describing the error."
    required:
      - status
      - statusString
      - module
      - title
parameters:
  category:
    in: path
    name: category
    type: string
    required: true
    description: |
      # Brief

      Resource category.
    enum: [snippets, solutions, references]
    x-example:
      "snippets"
  field:
    in: path
    name: field
    type: string
    required: true
    description: |
      # Brief

      Resource field.
    enum: [category, data, brief, description, name, groups, tags, links, source, versions, languages, filename, created, updated, uuid, digest]
    x-example:
      "brief"
  id:
    in: path
    name: id
    type: string
    required: true
    description: |
      # Brief

      Resource identity that can be either digest or UUID. Partial identities are allowed
      but they may result multiple matching resources which is an error. The ``id`` path
      parameter must uniquely identify the requested resource.
      
      Even though the code supports digest and partial identities, it is recommended to
      use full length UUID. The full length UUID remains the same for whole life time of
      the resource. The digest will change when the resource attributes change.
    x-example:
      "27cd5827-b6ef-4067-b5ac-3ceac07dde9f"

  sall:
    in: query
    name: sall
    type: array
    items:
      type: string
    required: false
    default: .
    description: |
      # Brief

      Search given keywords.
    x-example:
      - "python"
      - "python,docker"
  scat:
    in: query
    name: scat
    type: array
    items:
      type: string
      enum: [snippet, solution, reference]
    required: false
    default: snippet,solution,reference
    description: |
      # Brief

      Limit search to resources in defined categories.
    x-example:
      - "snippet"
      - "snippet,solution"
  stag:
    in: query
    name: stag
    type: array
    items:
      type: string
    required: false
    default: .
    description: |
      # Brief

      Limit search to resources that have any of the given tags.
    x-example:
      - "kafka"
      - "kafka,elasticsearch"
  sgrp:
    in: query
    name: sgrp
    type: array
    items:
      type: string
    required: false
    default: .
    description: |
      # Brief

      Limit search to resources that are in any of the given groups.
  digest:
    in: query
    name: digest
    type: array
    items:
      type: string
    required: false
    default: .
    description: |
      # Brief

      Limit search to resources that are have given digest.
    x-example:
      - "54e41e9b52a02b631b5c65a6a053fcbabc77ccd42b02c64fdfbc76efdb18e319"
      - "54e41e9b52a02b63"
      - "54e41e9b52a02b63,db712a82662d6932"
  uuid:
    in: query
    name: uuid
    type: array
    items:
      type: string
    required: false
    default: .
    description: |
      # Brief

      Limit search to resources that are have given uuid.
    x-example:
      - "27cd5827-b6ef-4067-b5ac-3ceac07dde9f"
      - "27cd5827-b6ef"
      - "27cd5827-b6ef,12c2dff8-4e23"
  filter:
    in: query
    name: filter
    type: string
    required: false
    default: .
    description: |
      # Brief

      Filter search results with a regexp.
  limit:
    in: query
    name: limit
    type: string
    required: false
    default: 20
    description: |
      # Brief

      Limit resources in search result.
  fields:
    in: query
    name: fields
    type: array
    required: false
    items:
      type: string
      enum: [category, data, brief, description, name, groups, tags, links, source, versions, languages, filename, created, updated, uuid, digest]
    default: category, data, brief, description, name,groups, tags, links, source, versions, languages, filename, created, updated, uuid, digest
    description: |
      # Brief

      Limit fields that are returned in result list.
  sort:
    name: sort
    type: string
    required: false
    default: brief
    enum: [category, data, brief, description, name, groups, tags, links, source, versions, languages, filename, created, updated, uuid, digest]
    in: query
    description: |
      # Brief

      Sort based on defined field.
  offset:
    in: query
    name: offset
    type: string
    required: false
    default: "0"
    description: |
      # Brief

      Offset from the beginning of the search results.
  x-http-method-override:
    in: header
    name: X-HTTP-Method-Override
    type: string
    required: true
    enum: [PUT, PATCH, DELETE]
    description: |
      # Brief

      Override POST method with PUT, PATCH or DELETE.
  requestResource:
    in: body
    name: requestResource
    required: true
    schema:
      $ref: "#/definitions/requestResource"
    description: |
      # Brief

      Create or update existing resource.
  requestCollection:
    in: body
    name: requestCollection
    required: true
    schema:
      $ref: "#/definitions/requestCollection"
    description: |
      # Brief

      Create list of resources.
