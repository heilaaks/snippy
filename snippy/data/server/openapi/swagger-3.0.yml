openapi: 3.0.1
info:
  title: Snippy - Software development notes
  description: Snippy is a software development and maintenance notes manager. It
    allows organizing and sharing examples and solutions from self hosted or shared
    storage.
  termsOfService: https://github.com/heilaaks/snippy
  contact:
    email: laaksonen.heikki.j@gmail.com
  license:
    name: GNU Affero General Public License v3.0 or later
    url: https://github.com/heilaaks/snippy/blob/master/LICENSE
  version: 0.11.0
servers:
- url: http://localhost:8080/api/snippy/rest
- url: https://localhost:8080/api/snippy/rest
paths:
  /{category}:
    get:
      tags:
      - content
      summary: Search resource
      parameters:
      - name: category
        in: path
        description: |
          # Brief

          Resource category.
        required: true
        schema:
          type: string
          enum:
          - snippets
          - solutions
          - references
      - name: sall
        in: query
        description: |
          # Brief

          Search given keywords.
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
      - name: stag
        in: query
        description: |
          # Brief

          Limit search to resources that have defined tags.
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
      - name: sgrp
        in: query
        description: |
          # Brief

          Limit search to resources that are in defined groups.
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
      - name: digest
        in: query
        description: |
          # Brief

          Limit search to resources that are have given digest.
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
      - name: uuid
        in: query
        description: |
          # Brief

          Limit search to resources that are have given uuid.
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
      - name: filter
        in: query
        description: |
          # Brief

          Filter search result with given regexp.
        schema:
          type: string
          default: "."
      - name: limit
        in: query
        description: |
          # Brief

          Limit resources in search result.
        schema:
          type: string
          default: "20"
      - name: fields
        in: query
        description: |
          # Brief

          Limit fields that are returned in result list.
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
            enum:
            - category
            - data
            - brief
            - description
            - name
            - groups
            - tags
            - links
            - source
            - versions
            - filename
            - created
            - updated
            - uuid
            - digest
      - name: sort
        in: query
        description: |
          # Brief

          Sort based on defined field.
        schema:
          type: string
          default: brief
          enum:
          - category
          - data
          - brief
          - description
          - name
          - groups
          - tags
          - links
          - source
          - versions
          - filename
          - created
          - updated
          - uuid
          - digest
      - name: offset
        in: query
        description: |
          # Brief

          Offset from the beginning of the search results.
        schema:
          type: string
          default: "0"
      responses:
        200:
          description: OK
          content:
            application/vnd.api+json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/responseCollectionGet'
        400:
          description: Request not syntactically correct
          content:
            application/vnd.api+json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/responseErrors'
        404:
          description: Resource not found
          content:
            application/vnd.api+json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/responseErrors'
        500:
          description: Internal server error
          content: {}
    post:
      tags:
      - content
      summary: Add new resource in defined category.
      parameters:
      - name: category
        in: path
        description: |
          # Brief

          Resource category.
        required: true
        schema:
          type: string
          enum:
          - snippets
          - solutions
          - references
      requestBody:
        description: |
          # Brief

          Create or update existing resource.
        content:
          application/vnd.api+json; charset=UTF-8:
            schema:
              $ref: '#/components/schemas/requestResource'
        required: true
      responses:
        201:
          description: Resource created
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/responseCollectionPost'
        400:
          description: Request not syntactically correct
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/responseErrors'
        403:
          description: Using client generated ID is not supported
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/responseErrors'
        500:
          description: Internal server error
          content: {}
  /{category}/{id}:
    get:
      tags:
      - content
      summary: Search defined resource based on given identity.
      parameters:
      - name: category
        in: path
        description: |
          # Brief

          Resource category.
        required: true
        schema:
          type: string
          enum:
          - snippets
          - solutions
          - references
      - name: id
        in: path
        description: |
          # Brief

          Resource identity that can be either digest or UUID. Partial identities are allowed
          but they may result multiple matching resources which is an error. The ``id`` path
          parameter must uniquely identify the requested resource.
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/vnd.api+json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/responseResource'
        400:
          description: Request not syntactically correct
          content:
            application/vnd.api+json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/responseErrors'
        404:
          description: Resource not found
          content:
            application/vnd.api+json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/responseErrors'
        500:
          description: Internal server error
          content: {}
    put:
      tags:
      - content
      summary: Update defined resource based on given identity.
      parameters:
      - name: category
        in: path
        description: |
          # Brief

          Resource category.
        required: true
        schema:
          type: string
          enum:
          - snippets
          - solutions
          - references
      - name: id
        in: path
        description: |
          # Brief

          Resource identity that can be either digest or UUID. Partial identities are allowed
          but they may result multiple matching resources which is an error. The ``id`` path
          parameter must uniquely identify the requested resource.
        required: true
        schema:
          type: string
      requestBody:
        description: |
          # Brief

          Create or update existing resource.
        content:
          application/vnd.api+json; charset=UTF-8:
            schema:
              $ref: '#/components/schemas/requestResource'
        required: true
      responses:
        200:
          description: OK
          content:
            application/vnd.api+json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/responseResource'
        400:
          description: Request not syntactically correct
          content:
            application/vnd.api+json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/responseErrors'
        403:
          description: Using client generated ID is not supported
          content:
            application/vnd.api+json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/responseErrors'
        404:
          description: Resource not found
          content:
            application/vnd.api+json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/responseErrors'
        500:
          description: Internal server error
          content: {}
    post:
      tags:
      - content
      summary: Override POST with PUT, PATCH or DELETE
      parameters:
      - name: category
        in: path
        description: |
          # Brief

          Resource category.
        required: true
        schema:
          type: string
          enum:
          - snippets
          - solutions
          - references
      - name: id
        in: path
        description: |
          # Brief

          Resource identity that can be either digest or UUID. Partial identities are allowed
          but they may result multiple matching resources which is an error. The ``id`` path
          parameter must uniquely identify the requested resource.
        required: true
        schema:
          type: string
      - name: X-HTTP-Method-Override
        in: header
        description: |
          # Brief

          Override POST method with PUT, PATCH or DELETE.
        required: true
        schema:
          type: string
          enum:
          - PUT
          - PATCH
          - DELETE
      requestBody:
        description: |
          # Brief

          Create or update existing resource.
        content:
          application/vnd.api+json; charset=UTF-8:
            schema:
              $ref: '#/components/schemas/requestResource'
        required: true
      responses:
        200:
          description: OK
          content:
            application/vnd.api+json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/responseResource'
        204:
          description: Resource deleted
          content: {}
        400:
          description: Request not syntactically correct
          content:
            application/vnd.api+json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/responseErrors'
        403:
          description: Using client generated ID is not supported
          content:
            application/vnd.api+json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/responseErrors'
        404:
          description: Resource not found
          content:
            application/vnd.api+json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/responseErrors'
        500:
          description: Internal server error
          content: {}
    delete:
      tags:
      - content
      summary: Delete defined resource based on given identity.
      parameters:
      - name: category
        in: path
        description: |
          # Brief

          Resource category.
        required: true
        schema:
          type: string
          enum:
          - snippets
          - solutions
          - references
      - name: id
        in: path
        description: |
          # Brief

          Resource identity that can be either digest or UUID. Partial identities are allowed
          but they may result multiple matching resources which is an error. The ``id`` path
          parameter must uniquely identify the requested resource.
        required: true
        schema:
          type: string
      responses:
        204:
          description: Resource deleted
          content: {}
        400:
          description: Request not syntactically correct
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/responseErrors'
        404:
          description: Resource not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/responseErrors'
        409:
          description: More than one resource found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/responseErrors'
        500:
          description: Internal server error
          content: {}
    patch:
      tags:
      - content
      summary: Update defined resource based on given identity.
      parameters:
      - name: category
        in: path
        description: |
          # Brief

          Resource category.
        required: true
        schema:
          type: string
          enum:
          - snippets
          - solutions
          - references
      - name: id
        in: path
        description: |
          # Brief

          Resource identity that can be either digest or UUID. Partial identities are allowed
          but they may result multiple matching resources which is an error. The ``id`` path
          parameter must uniquely identify the requested resource.
        required: true
        schema:
          type: string
      requestBody:
        description: |
          # Brief

          Create or update existing resource.
        content:
          application/vnd.api+json; charset=UTF-8:
            schema:
              $ref: '#/components/schemas/requestResource'
        required: true
      responses:
        200:
          description: OK
          content:
            application/vnd.api+json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/responseResource'
        400:
          description: Request not syntactically correct
          content:
            application/vnd.api+json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/responseErrors'
        403:
          description: Using client generated ID is not supported
          content:
            application/vnd.api+json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/responseErrors'
        404:
          description: Resource not found
          content:
            application/vnd.api+json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/responseErrors'
        500:
          description: Internal server error
          content: {}
  /{category}{id}{field}:
    get:
      tags:
      - content
      summary: Get resource attribute.
      parameters:
      - name: category
        in: path
        description: |
          # Brief

          Resource category.
        required: true
        schema:
          type: string
          enum:
          - snippets
          - solutions
          - references
      - name: id
        in: path
        description: |
          # Brief

          Resource identity that can be either digest or UUID. Partial identities are allowed
          but they may result multiple matching resources which is an error. The ``id`` path
          parameter must uniquely identify the requested resource.
        required: true
        schema:
          type: string
      - name: field
        in: path
        description: |
          # Brief

          Resource field.
        required: true
        schema:
          type: string
          enum:
          - category
          - data
          - brief
          - description
          - name
          - groups
          - tags
          - links
          - source
          - versions
          - filename
          - created
          - updated
          - uuid
          - digest
      - name: sall
        in: query
        description: |
          # Brief

          Search given keywords.
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
      - name: stag
        in: query
        description: |
          # Brief

          Limit search to resources that have defined tags.
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
      - name: sgrp
        in: query
        description: |
          # Brief

          Limit search to resources that are in defined groups.
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
      - name: digest
        in: query
        description: |
          # Brief

          Limit search to resources that are have given digest.
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
      - name: uuid
        in: query
        description: |
          # Brief

          Limit search to resources that are have given uuid.
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
      - name: filter
        in: query
        description: |
          # Brief

          Filter search result with given regexp.
        schema:
          type: string
          default: "."
      - name: limit
        in: query
        description: |
          # Brief

          Limit resources in search result.
        schema:
          type: string
          default: "20"
      - name: fields
        in: query
        description: |
          # Brief

          Limit fields that are returned in result list.
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
            enum:
            - category
            - data
            - brief
            - description
            - name
            - groups
            - tags
            - links
            - source
            - versions
            - filename
            - created
            - updated
            - uuid
            - digest
      - name: sort
        in: query
        description: |
          # Brief

          Sort based on defined field.
        schema:
          type: string
          default: brief
          enum:
          - category
          - data
          - brief
          - description
          - name
          - groups
          - tags
          - links
          - source
          - versions
          - filename
          - created
          - updated
          - uuid
          - digest
      - name: offset
        in: query
        description: |
          # Brief

          Offset from the beginning of the search results.
        schema:
          type: string
          default: "0"
      responses:
        200:
          description: OK
          content:
            application/vnd.api+json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/responseResource'
        400:
          description: Request not syntactically correct
          content:
            application/vnd.api+json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/responseErrors'
        404:
          description: Resource not found
          content:
            application/vnd.api+json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/responseErrors'
        500:
          description: Internal server error
          content: {}
  /tags:
    get:
      tags:
      - tags
      summary: Get unique tags.
      parameters:
      - name: scat
        in: query
        description: |
          # Brief

          Limit search to resources in defined categories.
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
            enum:
            - snippet
            - solution
            - reference
      - name: sall
        in: query
        description: |
          # Brief

          Search given keywords.
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
      - name: stag
        in: query
        description: |
          # Brief

          Limit search to resources that have defined tags.
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
      - name: sgrp
        in: query
        description: |
          # Brief

          Limit search to resources that are in defined groups.
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
      responses:
        200:
          description: OK
          content:
            application/vnd.api+json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/responseTags'
        400:
          description: Request not syntactically correct
          content:
            application/vnd.api+json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/responseErrors'
        404:
          description: Resource not found
          content:
            application/vnd.api+json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/responseErrors'
        500:
          description: Internal server error
          content: {}
  /groups:
    get:
      tags:
      - groups
      summary: Get unique groups.
      parameters:
      - name: scat
        in: query
        description: |
          # Brief

          Limit search to resources in defined categories.
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
            enum:
            - snippet
            - solution
            - reference
      - name: sall
        in: query
        description: |
          # Brief

          Search given keywords.
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
      - name: stag
        in: query
        description: |
          # Brief

          Limit search to resources that have defined tags.
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
      - name: sgrp
        in: query
        description: |
          # Brief

          Limit search to resources that are in defined groups.
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
      responses:
        200:
          description: OK
          content:
            application/vnd.api+json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/responseGroups'
        400:
          description: Request not syntactically correct
          content:
            application/vnd.api+json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/responseErrors'
        404:
          description: Resource not found
          content:
            application/vnd.api+json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/responseErrors'
        500:
          description: Internal server error
          content: {}
  /:
    get:
      tags:
      - hello
      summary: Get server hello.
      responses:
        200:
          description: OK
          content:
            application/vnd.api+json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/responseHello'
components:
  schemas:
    attributeBrief:
      type: string
      description: |
        # Brief

        Optional brief description of the resource.
      default: ""
    requestResource:
      required:
      - data
      type: object
      properties:
        data:
          $ref: '#/components/schemas/requestData'
    requestAttributes:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/attributeData'
        brief:
          $ref: '#/components/schemas/attributeBrief'
        description:
          $ref: '#/components/schemas/attributeDescription'
        name:
          $ref: '#/components/schemas/attributeName'
        groups:
          $ref: '#/components/schemas/attributeGroups'
        tags:
          $ref: '#/components/schemas/attributeTags'
        links:
          $ref: '#/components/schemas/attributeLinks'
        source:
          $ref: '#/components/schemas/attributeSource'
        versions:
          $ref: '#/components/schemas/attributeVersions'
        filename:
          $ref: '#/components/schemas/attributeFilename'
      description: |
        # Brief

        Resource `data` attributes for all API endoints HTTP requests.

        Different resource categories require different attributes. Creating and updating resources have
        different mandatory resource attribute requirements. For example `snippets` require `data` but
        `references` require `links` attribute. PATCH and PUT can be send without `data` attribute for
        `snippets`.

        Because of these reasons, JSON schema definition does not define the required properties.
    requestCollection:
      required:
      - data
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/requestData'
    metaResponse:
      required:
      - count
      - limit
      - offset
      - total
      type: object
      properties:
        count:
          type: string
          description: Number of resources in the data object.
        limit:
          type: string
          description: The search limit used in request.
        offset:
          type: string
          description: The search offset used in request.
        total:
          type: string
          description: Total number of search results without limit being applied.
    attributeFilename:
      type: string
      description: |
        # Brief

        Optional filename. This attribute can be used for example to export the resource into file
        which name is defined by this attribute-
      default: ""
    responseDataTags:
      required:
      - attributes
      - type
      type: object
      properties:
        type:
          type: string
          enum:
          - tags
        attributes:
          $ref: '#/components/schemas/responseAttributesTags'
    paginationLinks:
      required:
      - first
      - last
      - self
      type: object
      properties:
        self:
          type: string
          description: Pagination link to this page.
          format: uri
        first:
          type: string
          description: Pagination link to first page.
          format: uri
        next:
          type: string
          description: Pagination link to next page.
          format: uri
        prev:
          type: string
          description: Pagination link to previous page.
          format: uri
        last:
          type: string
          description: Pagination link to last page.
          format: uri
    responseAttributes:
      type: object
      properties:
        category:
          $ref: '#/components/schemas/attributeCategory'
        data:
          $ref: '#/components/schemas/attributeData'
        brief:
          $ref: '#/components/schemas/attributeBrief'
        description:
          $ref: '#/components/schemas/attributeDescription'
        name:
          $ref: '#/components/schemas/attributeName'
        groups:
          $ref: '#/components/schemas/attributeGroups'
        tags:
          $ref: '#/components/schemas/attributeTags'
        links:
          $ref: '#/components/schemas/attributeLinks'
        source:
          $ref: '#/components/schemas/attributeSource'
        versions:
          $ref: '#/components/schemas/attributeVersions'
        filename:
          $ref: '#/components/schemas/attributeFilename'
        created:
          $ref: '#/components/schemas/attributeCreated'
        updated:
          $ref: '#/components/schemas/attributeUpdated'
        uuid:
          $ref: '#/components/schemas/attributeUuid'
        digest:
          $ref: '#/components/schemas/attributeDigest'
      description: |
        # Brief

        Resource `data` attributes for all content API endoints.

        Different resource categories require different attributes. Creating and updating resources have
        different mandatory resource attribute requirements. For example `snippets` require `data` but
        `references` require `links` attribute. PATCH and PUT can be send without `data` attribute for
        `snippets`.

        Because of these reasons, JSON schema definition does not define the required properties.
    attributeDescription:
      type: string
      description: |
        # Brief

        Optional long description of the resource.
      default: ""
    responseData:
      required:
      - attributes
      - type
      type: object
      properties:
        type:
          type: string
          enum:
          - snippet
          - solution
          - reference
        id:
          type: string
        attributes:
          $ref: '#/components/schemas/responseAttributes'
    responseErrors:
      required:
      - errors
      - meta
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/metaInfo'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/error'
    responseAttributesGroups:
      type: object
      properties:
        groups:
          $ref: '#/components/schemas/attributeGroupsDictionary'
      description: |
        # Brief

        Resource `data` attributes groups API endpont.
    error:
      required:
      - module
      - status
      - statusString
      - title
      type: object
      properties:
        status:
          type: string
          description: HTTP status code.
        statusString:
          type: string
          description: HTTP status as text string.
        module:
          type: string
          description: Location of error.
        title:
          type: string
          description: Message describing the error.
    attributeCreated:
      type: string
      description: |
        # Brief

        Automatically generated UTC timestamp when the resource is created. The time is defined with
        RFC 3339 profile of the ISO 8601 specification.
    responseAttributesTags:
      type: object
      properties:
        tags:
          $ref: '#/components/schemas/attributeTagsDictionary'
      description: |
        # Brief

        Resource `data` attributes tags API endpont.
    attributeUuid:
      type: string
      description: |
        # Brief

        Automatically assigned UUID for the resource.
    attributeName:
      type: string
      description: |
        # Brief

        Optional name for the resource.
      default: ""
    responseGroups:
      required:
      - data
      type: object
      properties:
        data:
          $ref: '#/components/schemas/responseDataGroups'
    requestData:
      required:
      - attributes
      - type
      type: object
      properties:
        type:
          type: string
          enum:
          - snippet
          - solution
          - reference
        attributes:
          $ref: '#/components/schemas/requestAttributes'
    attributeGroups:
      type: array
      description: |
        # Brief

        Optional list of groups to which the resource belongs.
      items:
        type: string
    attributeGroupsDictionary:
      type: object
      additionalProperties:
        type: integer
      description: |
        # Brief

        Unique values for groups with count for each group value.
      example:
        python: 8
        java: 1
    attributeUpdated:
      type: string
      description: |
        # Brief

        Automatically generated UTC timestamp for the latest update. The time is defined with RFC 3339
        profile of the ISO 8601 specification.
    responseResource:
      required:
      - data
      type: object
      properties:
        data:
          $ref: '#/components/schemas/responseData'
        link:
          $ref: '#/components/schemas/resourceLink'
    attributeTagsDictionary:
      type: object
      additionalProperties:
        type: integer
      description: |
        # Brief

        Unique values for tags with count for each tag value.
      example:
        linux: 10
        docker: 4
    responseDataGroups:
      required:
      - attributes
      - type
      type: object
      properties:
        type:
          type: string
          enum:
          - groups
        attributes:
          $ref: '#/components/schemas/responseAttributesGroups'
    attributeVersions:
      type: array
      description: |
        # Brief

        Optional list of services and versions related to the resource.
      items:
        type: string
    attributeDigest:
      type: string
      description: |
        # Brief

        Automatically assigned message digest that uniquely identifies the resource.
    responseCollectionGet:
      required:
      - data
      - meta
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/metaResponse'
        data:
          type: array
          items:
            $ref: '#/components/schemas/responseData'
        links:
          $ref: '#/components/schemas/paginationLinks'
    responseTags:
      required:
      - data
      type: object
      properties:
        data:
          $ref: '#/components/schemas/responseDataTags'
    metaInfo:
      required:
      - docs
      - homepage
      - openapi
      - version
      type: object
      properties:
        docs:
          type: string
          description: Location of the public documentation.
        homepage:
          type: string
          description: Server homepage.
        openapi:
          type: string
          description: OpenAPI specification.
        version:
          type: string
          description: Server version.
    attributeCategory:
      type: string
      description: |
        # Brief

        Automatically assigned resource category.
      enum:
      - snippet
      - solution
      - reference
    attributeTags:
      type: array
      description: |
        # Brief

        Optional list of tags.
      items:
        type: string
    attributeSource:
      type: string
      description: |
        # Brief

        Optional external source for the resource."
      default: ""
    responseCollectionPost:
      required:
      - data
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/responseData'
    responseHello:
      required:
      - meta
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/metaInfo'
    attributeLinks:
      type: array
      description: |
        # Brief

        Optional list of links.
      items:
        type: string
    resourceLink:
      type: object
      properties:
        self:
          type: string
          description: Link pointing to resource.
    attributeData:
      type: array
      description: |
        # Brief

        Resource data attribute.
      items:
        type: string
  responses:
    200-collection:
      description: OK
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/responseCollectionGet'
    200-hello:
      description: OK
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/responseHello'
    201:
      description: Resource created
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/responseCollectionPost'
    200-groups:
      description: OK
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/responseGroups'
    400:
      description: Request not syntactically correct
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/responseErrors'
    200-resource:
      description: OK
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/responseResource'
    500:
      description: Internal server error
      content: {}
    204:
      description: Resource deleted
      content: {}
    403:
      description: Using client generated ID is not supported
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/responseErrors'
    404:
      description: Resource not found
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/responseErrors'
    200-tags:
      description: OK
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/responseTags'
    409:
      description: More than one resource found
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/responseErrors'
  parameters:
    offset:
      name: offset
      in: query
      description: |
        # Brief

        Offset from the beginning of the search results.
      schema:
        type: string
        default: "0"
    sgrp:
      name: sgrp
      in: query
      description: |
        # Brief

        Limit search to resources that are in defined groups.
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    sort:
      name: sort
      in: query
      description: |
        # Brief

        Sort based on defined field.
      schema:
        type: string
        default: brief
        enum:
        - category
        - data
        - brief
        - description
        - name
        - groups
        - tags
        - links
        - source
        - versions
        - filename
        - created
        - updated
        - uuid
        - digest
    x-http-method-override:
      name: X-HTTP-Method-Override
      in: header
      description: |
        # Brief

        Override POST method with PUT, PATCH or DELETE.
      required: true
      schema:
        type: string
        enum:
        - PUT
        - PATCH
        - DELETE
    uuid:
      name: uuid
      in: query
      description: |
        # Brief

        Limit search to resources that are have given uuid.
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
      example:
      - 27cd5827-b6ef-4067-b5ac-3ceac07dde9f
      - 27cd5827-b6ef
      - 27cd5827-b6ef,12c2dff8-4e23
    filter:
      name: filter
      in: query
      description: |
        # Brief

        Filter search result with given regexp.
      schema:
        type: string
        default: "."
    stag:
      name: stag
      in: query
      description: |
        # Brief

        Limit search to resources that have defined tags.
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
      example:
      - kafka
      - kafka,elasticsearch
    field:
      name: field
      in: path
      description: |
        # Brief

        Resource field.
      required: true
      schema:
        type: string
        enum:
        - category
        - data
        - brief
        - description
        - name
        - groups
        - tags
        - links
        - source
        - versions
        - filename
        - created
        - updated
        - uuid
        - digest
      example: brief
    scat:
      name: scat
      in: query
      description: |
        # Brief

        Limit search to resources in defined categories.
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
          enum:
          - snippet
          - solution
          - reference
      example:
      - snippet
      - snippet,solution
    digest:
      name: digest
      in: query
      description: |
        # Brief

        Limit search to resources that are have given digest.
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
      example:
      - 54e41e9b52a02b631b5c65a6a053fcbabc77ccd42b02c64fdfbc76efdb18e319
      - 54e41e9b52a02b63
      - 54e41e9b52a02b63,db712a82662d6932
    limit:
      name: limit
      in: query
      description: |
        # Brief

        Limit resources in search result.
      schema:
        type: string
        default: "20"
    id:
      name: id
      in: path
      description: |
        # Brief

        Resource identity that can be either digest or UUID. Partial identities are allowed
        but they may result multiple matching resources which is an error. The ``id`` path
        parameter must uniquely identify the requested resource.
      required: true
      schema:
        type: string
      example:
      - 54e41e9b52a02b631b5c65a6a053fcbabc77ccd42b02c64fdfbc76efdb18e319
      - 54e41e9b52a02b63
      - 54e41e9b52a02b63,db712a82662d6932
    sall:
      name: sall
      in: query
      description: |
        # Brief

        Search given keywords.
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
      example:
      - python
      - python,docker
    category:
      name: category
      in: path
      description: |
        # Brief

        Resource category.
      required: true
      schema:
        type: string
        enum:
        - snippets
        - solutions
        - references
      example: snippets
    fields:
      name: fields
      in: query
      description: |
        # Brief

        Limit fields that are returned in result list.
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
          enum:
          - category
          - data
          - brief
          - description
          - name
          - groups
          - tags
          - links
          - source
          - versions
          - filename
          - created
          - updated
          - uuid
          - digest
  requestBodies:
    requestResource:
      description: |
        # Brief

        Create or update existing resource.
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/requestResource'
      required: true
    requestCollection:
      description: |
        # Brief

        Create list of resources.
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/requestCollection'
      required: true
